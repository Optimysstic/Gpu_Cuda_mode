# -*- coding: utf-8 -*-
"""Element_wise_Square_GPU_mode.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c2VXInrACCtBswm80EiXdVdy1lx4akm_
"""

# element wise square
import torch
tensor = torch.tensor([1,2,3,4,5])
squared_tensor = tensor ** 2
# squared_tensor = torch.square(tensor)
print(squared_tensor)

def time_pytorch_function(func, input):
  start = torch.cuda.Event(enable_timing = True)
  end = torch.cuda.Event(enable_timing = True)

  # warmup
  for _ in range(5):
    func(input)
  start.record()
  func(input)
  end.record()
  torch.cuda.synchronize()
  return start.elapsed_time(end)

b = torch.rand(10000, 10000)

def square_2(squared_tensor):
  return squared_tensor * squared_tensor

def square_3(squared_tensor):
  return squared_tensor ** 2

time_pytorch_function(torch.square, b)
time_pytorch_function(square_2, b)
time_pytorch_function(square_3, b)

print("=============")
print("Profiling torch.square")
print("=============")

# now profile each function using pytorch profiler
with torch.autograd.profiler.profile(use_cuda = True) as prof:
  square_2(b)
print(prof.key_averages().table(sort_by = "cuda_time_total", row_limit = 10))
print("=============")
print("Profiling squared_tensor * squared_tensor")
print("=============")

with torch.autograd.profiler.profile(use_cuda=True) as prof:
    square_2(b)

print(prof.key_averages().table(sort_by="cuda_time_total", row_limit=10))

print("=============")
print("Profiling squared_tensor ** 2")
print("=============")

with torch.autograd.profiler.profile(use_cuda=True) as prof:
    square_3(b)

print(prof.key_averages().table(sort_by="cuda_time_total", row_limit=10))